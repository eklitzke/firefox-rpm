diff -up mozilla-beta-64737c752ac4af4766ad6f82720818521f3aca24/media/webrtc/trunk/webrtc/common_audio/vad/vad_core.c.fix-attr-order mozilla-beta-64737c752ac4af4766ad6f82720818521f3aca24/media/webrtc/trunk/webrtc/common_audio/vad/vad_core.c
--- mozilla-beta-64737c752ac4af4766ad6f82720818521f3aca24/media/webrtc/trunk/webrtc/common_audio/vad/vad_core.c.fix-attr-order	2018-02-03 11:59:21.173058184 -0500
+++ mozilla-beta-64737c752ac4af4766ad6f82720818521f3aca24/media/webrtc/trunk/webrtc/common_audio/vad/vad_core.c	2018-02-03 11:59:44.727509671 -0500
@@ -115,8 +115,8 @@ static int32_t WeightedAverage(int16_t*
 // undefined behavior, so not a good idea; this just makes UBSan ignore the
 // violation, so that our old code can continue to do what it's always been
 // doing.)
-static inline int32_t OverflowingMulS16ByS32ToS32(int16_t a, int32_t b)
-    RTC_NO_SANITIZE("signed-integer-overflow") {
+RTC_NO_SANITIZE("signed-integer-overflow") static inline int32_t OverflowingMulS16ByS32ToS32(int16_t a, int32_t b)
+{
   return a * b;
 }
 
diff -up mozilla-beta-64737c752ac4af4766ad6f82720818521f3aca24/media/webrtc/trunk/webrtc/modules/audio_coding/codecs/isac/fix/source/lattice.c.fix-attr-order mozilla-beta-64737c752ac4af4766ad6f82720818521f3aca24/media/webrtc/trunk/webrtc/modules/audio_coding/codecs/isac/fix/source/lattice.c
--- mozilla-beta-64737c752ac4af4766ad6f82720818521f3aca24/media/webrtc/trunk/webrtc/modules/audio_coding/codecs/isac/fix/source/lattice.c.fix-attr-order	2018-02-03 12:00:01.033129964 -0500
+++ mozilla-beta-64737c752ac4af4766ad6f82720818521f3aca24/media/webrtc/trunk/webrtc/modules/audio_coding/codecs/isac/fix/source/lattice.c	2018-02-03 12:00:45.758088456 -0500
@@ -209,8 +209,8 @@ void WebRtcIsacfix_NormLatticeFilterMa(s
 // Left shift of an int32_t that's allowed to overflow. (It's still undefined
 // behavior, so not a good idea; this just makes UBSan ignore the violation, so
 // that our old code can continue to do what it's always been doing.)
-static inline int32_t OverflowingLShiftS32(int32_t x, int shift)
-    RTC_NO_SANITIZE("shift") {
+RTC_NO_SANITIZE("shift") static inline int32_t OverflowingLShiftS32(int32_t x, int shift)
+{
   return x << shift;
 }
 
